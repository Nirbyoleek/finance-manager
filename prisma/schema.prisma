generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ===== AUTH.JS REQUIRED MODELS =====
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials login
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Auth.js relationships
  accounts      Account[]
  sessions      Session[]
  
  // Finance app relationships
  financeAccounts FinanceAccount[]
  transactions    Transaction[]
  categories      Category[]
  budgets         Budget[]
}

// Auth.js: OAuth accounts (Google, GitHub, etc.)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// Auth.js: User sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Auth.js: Email verification tokens
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ===== FINANCE APP MODELS =====
// Renamed from "Account" to "FinanceAccount" to avoid conflict
model FinanceAccount {
  id        String   @id @default(cuid())
  name      String
  type      String   // "checking", "savings", "credit_card", "cash"
  balance   Float    @default(0)
  currency  String   @default("USD")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactions Transaction[]

  @@index([userId])
}

model Category {
  id        String   @id @default(cuid())
  name      String
  type      String   // "income" or "expense"
  icon      String?
  color     String?
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactions Transaction[]
  budgets      Budget[]

  @@index([userId])
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  type        String   // "income" or "expense"
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId String
  account   FinanceAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([accountId])
  @@index([categoryId])
  @@index([date])
}

model Budget {
  id        String   @id @default(cuid())
  amount    Float
  period    String   // "monthly", "weekly", "yearly"
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([categoryId])
}
