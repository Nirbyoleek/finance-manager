generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Auth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User model
model User {
  id              String            @id @default(cuid())
  name            String?
  email           String            @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  accounts        Account[]
  sessions        Session[]
  financeAccounts FinanceAccount[]
  transactions    Transaction[]
  categories      Category[]
  budgets         Budget[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

// Finance models
model FinanceAccount {
  id           String        @id @default(cuid())
  name         String
  type         String
  balance      Float         @default(0)
  currency     String        @default("INR")
  color        String?
  icon         String?
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  transactions Transaction[]
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([userId])
}

model Transaction {
  id          String          @id @default(cuid())
  amount      Float
  type        String
  description String
  date        DateTime        @default(now())
  category    Category?       @relation(fields: [categoryId], references: [id])
  categoryId  String?
  account     FinanceAccount  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId   String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([userId])
  @@index([accountId])
  @@index([categoryId])
}

model Category {
  id           String        @id @default(cuid())
  name         String
  type         String
  color        String?
  icon         String?
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  transactions Transaction[]
  budgets      Budget[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([userId, name, type])
  @@index([userId])
}

model Budget {
  id         String    @id @default(cuid())
  name       String
  amount     Float
  period     String
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId])
  @@index([categoryId])
}
